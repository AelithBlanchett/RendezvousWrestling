// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RendezvousWrestling.Common.DataContext;

namespace RendezvousWrestling.Migrations
{
    [DbContext(typeof(RWDataContext))]
    [Migration("20210203045111_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Achievements.RWAchievement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserName");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Features.RWFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Permanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Uses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWFight", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Channel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentTurn")
                        .HasColumnType("int");

                    b.Property<bool>("Debug")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DiceLess")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FightLength")
                        .HasColumnType("int");

                    b.Property<int>("FightType")
                        .HasColumnType("int");

                    b.Property<int>("ForcedDiceRoll")
                        .HasColumnType("int");

                    b.Property<bool>("HasEnded")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasStarted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RequiredTeams")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WaitingForAction")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWFighterState", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AssignedTeam")
                        .HasColumnType("int");

                    b.Property<bool>("CanMoveFromOrOffRing")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ConsecutiveTurnsWithoutFocus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentDexterity")
                        .HasColumnType("int");

                    b.Property<int>("CurrentEndurance")
                        .HasColumnType("int");

                    b.Property<int>("CurrentPower")
                        .HasColumnType("int");

                    b.Property<int>("CurrentSensuality")
                        .HasColumnType("int");

                    b.Property<int>("CurrentToughness")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWillpower")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DexterityDelta")
                        .HasColumnType("int");

                    b.Property<int>("DistanceFromRingCenter")
                        .HasColumnType("int");

                    b.Property<int>("EnduranceDelta")
                        .HasColumnType("int");

                    b.Property<string>("FightId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("FightStatus")
                        .HasColumnType("int");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<int>("FpDamageLastRound")
                        .HasColumnType("int");

                    b.Property<int>("FpHealLastRound")
                        .HasColumnType("int");

                    b.Property<int>("HeartsDamageLastRound")
                        .HasColumnType("int");

                    b.Property<int>("HeartsHealLastRound")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("HpDamageLastRound")
                        .HasColumnType("int");

                    b.Property<int>("HpHealLastRound")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInTheRing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReady")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastDiceRoll")
                        .HasColumnType("int");

                    b.Property<int>("LastTagTurn")
                        .HasColumnType("int");

                    b.Property<int>("LivesRemaining")
                        .HasColumnType("int");

                    b.Property<int>("LpDamageLastRound")
                        .HasColumnType("int");

                    b.Property<int>("LpHealLastRound")
                        .HasColumnType("int");

                    b.Property<int>("Lust")
                        .HasColumnType("int");

                    b.Property<int>("OrgasmsDamageLastRound")
                        .HasColumnType("int");

                    b.Property<int>("OrgasmsHealLastRound")
                        .HasColumnType("int");

                    b.Property<int>("PowerDelta")
                        .HasColumnType("int");

                    b.Property<string>("RWFightId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RWFighterStateId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("SensualityDelta")
                        .HasColumnType("int");

                    b.Property<int>("StartingDexterity")
                        .HasColumnType("int");

                    b.Property<int>("StartingEndurance")
                        .HasColumnType("int");

                    b.Property<int>("StartingPower")
                        .HasColumnType("int");

                    b.Property<int>("StartingSensuality")
                        .HasColumnType("int");

                    b.Property<int>("StartingToughness")
                        .HasColumnType("int");

                    b.Property<int>("StartingWillpower")
                        .HasColumnType("int");

                    b.Property<string>("TargetsAsString")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ToughnessDelta")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("WantsDraw")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WillpowerDelta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FightId");

                    b.HasIndex("RWFightId");

                    b.HasIndex("RWFighterStateId");

                    b.HasIndex("UserId");

                    b.ToTable("FighterStates");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWFighterStats", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("ActionsCount")
                        .HasColumnType("int");

                    b.Property<int>("ActionsDefended")
                        .HasColumnType("int");

                    b.Property<int>("AverageDiceRoll")
                        .HasColumnType("int");

                    b.Property<int>("BondageCount")
                        .HasColumnType("int");

                    b.Property<int>("BrawlAtksCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentlyPlaying")
                        .HasColumnType("int");

                    b.Property<int>("CurrentlyPlayingSeason")
                        .HasColumnType("int");

                    b.Property<int>("DegradationCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EloRating")
                        .HasColumnType("int");

                    b.Property<int>("EscapeCount")
                        .HasColumnType("int");

                    b.Property<string>("FavoriteTagPartner")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FavoriteTeam")
                        .HasColumnType("int");

                    b.Property<int>("FightsCount")
                        .HasColumnType("int");

                    b.Property<int>("FightsCountCS")
                        .HasColumnType("int");

                    b.Property<int>("FightsPendingDraw")
                        .HasColumnType("int");

                    b.Property<int>("FightsPendingDrawSeason")
                        .HasColumnType("int");

                    b.Property<int>("FightsPendingReady")
                        .HasColumnType("int");

                    b.Property<int>("FightsPendingReadySeason")
                        .HasColumnType("int");

                    b.Property<int>("FightsPendingStart")
                        .HasColumnType("int");

                    b.Property<int>("FightsPendingStartSeason")
                        .HasColumnType("int");

                    b.Property<int>("FinishCount")
                        .HasColumnType("int");

                    b.Property<int>("ForcedWorshipCount")
                        .HasColumnType("int");

                    b.Property<int>("Forfeits")
                        .HasColumnType("int");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("int");

                    b.Property<int>("HighRiskCount")
                        .HasColumnType("int");

                    b.Property<int>("HumholdCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemPickups")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("LossesAgainstNemesis")
                        .HasColumnType("int");

                    b.Property<int>("LossesSeason")
                        .HasColumnType("int");

                    b.Property<int>("MasturbateCount")
                        .HasColumnType("int");

                    b.Property<int>("MatchesInLast24Hours")
                        .HasColumnType("int");

                    b.Property<int>("MatchesInLast48Hours")
                        .HasColumnType("int");

                    b.Property<int>("MissedAttacks")
                        .HasColumnType("int");

                    b.Property<string>("Nemesis")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PenetrationCount")
                        .HasColumnType("int");

                    b.Property<int>("Quits")
                        .HasColumnType("int");

                    b.Property<int>("RestCount")
                        .HasColumnType("int");

                    b.Property<int>("SexholdCount")
                        .HasColumnType("int");

                    b.Property<int>("SexstrikesCount")
                        .HasColumnType("int");

                    b.Property<int>("SextoyPickups")
                        .HasColumnType("int");

                    b.Property<int>("StraptoyCount")
                        .HasColumnType("int");

                    b.Property<int>("StunCount")
                        .HasColumnType("int");

                    b.Property<int>("SubholdCount")
                        .HasColumnType("int");

                    b.Property<int>("SubmitCount")
                        .HasColumnType("int");

                    b.Property<int>("TagsCount")
                        .HasColumnType("int");

                    b.Property<int>("TimesFoughtWithFavoriteTagPartner")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.Property<int>("WinsSeason")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("AreStatsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Sensuality")
                        .HasColumnType("int");

                    b.Property<int>("Tokens")
                        .HasColumnType("int");

                    b.Property<int>("TokensSpent")
                        .HasColumnType("int");

                    b.Property<int>("Toughness")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Willpower")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Modifiers.RWModifier", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ApplierId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("AreDamageMultipliers")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiceRoll")
                        .HasColumnType("int");

                    b.Property<int>("EscapeRoll")
                        .HasColumnType("int");

                    b.Property<string>("FightId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("FocusDamage")
                        .HasColumnType("int");

                    b.Property<int>("FocusHeal")
                        .HasColumnType("int");

                    b.Property<int>("HpDamage")
                        .HasColumnType("int");

                    b.Property<int>("HpHeal")
                        .HasColumnType("int");

                    b.Property<string>("IdParentActions")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHold")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStun")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LustDamage")
                        .HasColumnType("int");

                    b.Property<int>("LustHeal")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TimeToTrigger")
                        .HasColumnType("int");

                    b.Property<int>("TriggeringEvent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Uses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplierId");

                    b.HasIndex("FightId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Modifiers");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Achievements.RWAchievement", b =>
                {
                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWUser", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Features.RWFeature", b =>
                {
                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWUser", "Receiver")
                        .WithMany("Features")
                        .HasForeignKey("ReceiverId");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWFighterState", b =>
                {
                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWFight", "Fight")
                        .WithMany("Fighters")
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWFight", null)
                        .WithMany("AlivePlayers")
                        .HasForeignKey("RWFightId");

                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWFighterState", null)
                        .WithMany("Targets")
                        .HasForeignKey("RWFighterStateId");

                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWUser", "User")
                        .WithMany("FighterStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWFighterStats", b =>
                {
                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWUser", "User")
                        .WithOne("Stats")
                        .HasForeignKey("RendezvousWrestling.FightSystem.Fight.RWFighterStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Modifiers.RWModifier", b =>
                {
                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWFighterState", "Applier")
                        .WithMany("AppliedModifiers")
                        .HasForeignKey("ApplierId");

                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWFight", "Fight")
                        .WithMany()
                        .HasForeignKey("FightId");

                    b.HasOne("RendezvousWrestling.FightSystem.Fight.RWFighterState", "Receiver")
                        .WithMany("ReceivedModifiers")
                        .HasForeignKey("ReceiverId");

                    b.Navigation("Applier");

                    b.Navigation("Fight");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWFight", b =>
                {
                    b.Navigation("AlivePlayers");

                    b.Navigation("Fighters");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWFighterState", b =>
                {
                    b.Navigation("AppliedModifiers");

                    b.Navigation("ReceivedModifiers");

                    b.Navigation("Targets");
                });

            modelBuilder.Entity("RendezvousWrestling.FightSystem.Fight.RWUser", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Features");

                    b.Navigation("FighterStates");

                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
